1. What happens when you initialize a repository? Why do you need to do it?

	When git init command is called, it initialises the repository which creates a hidden .git file in the working directory. So now, we can use git commands.  Then, by using various git commands, we can create or checkout commits and branches. 

2. How is the staging area different from the working directory and the repository?
What value do you think it offers?

	It is a temporary area which acts like a placeholder for files we wanna include in our commit. We can add selective or all files in it and then add it to the repository once we are sure about the files to add.

3. How can you use the staging area to make sure you have one commit per logical 
change?

	We can add files with one logical change to the staging area, then, commit them using git commit command. Further, the next logical change can be added to the staging area and then committed.

4. What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

	When we want to experiment a new feature but aren't sure if it will work and do not want to disturb the whole project, we can experiment by creating a separate branch and then later merge if the experiment works out. Also, suppose we wanna add an Italian version of our project but ain't sure, then we can again use a separate branch, and later include an option in settings for the Italian version too by merging, etc.

5. How do the diagrams help you visualize the branch structure?

	Diagrams are very useful in visualizing how our project works/splits into multiple branches and how some branches are merged back to the master/main branch. This helps to keep a track of how we are proceeding with our project and helps to be clear in our work.

6. What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?



	On merging two branches together, the new features or changes introduced are all reflected into one single branch/commit. So, its very useful when you are working in groups (or even individually), as you can focus on separate features and when they work out you can finally merge them. Diagrams are used for representation as they can be very helpful in having a clear understanding of the workflow of the project, when and where different branched were created and when were they merged.